getwd()
data.dir = "/Users/tilman_work/Documents/Projects/scvworkflow/testset/kallistobus"
dir <- normalizePath(data.dir, mustWork = TRUE)
output_folders <- list.files(dir,
recursive = FALSE, include.dirs = TRUE)
output_folders
remotes::install_github('satijalab/seurat-wrappers')
library(SeuratWrappers)
library(Seurat)
library(SeuratWrappers)
data.dir = "/Users/tilman_work/Documents/Projects/scvworkflow/testset/kallistobus"
dir <- normalizePath(data.dir, mustWork = TRUE)
output_folders <- list.files(dir,
recursive = FALSE, include.dirs = TRUE, full.names = TRUE)
#Load loom files and merge datasets
#Load loom files and merge datasets
for (f in output_folders) {
print(f)
}
#Load loom files and merge datasets
for (f in output_folders) {
print(f+"counts_unfiltered/adata.loom")
}
#Load loom files and merge datasets
for (f in output_folders) {
loom.path <- paste(f,"/counts_unfiltered/adata.loom")
print(loom.path)
}
#Load loom files and merge datasets
for (f in output_folders) {
loom.path <- paste0(f,"/counts_unfiltered/adata.loom")
print(loom.path)
}
#Load loom files and merge datasets
for (f in output_folders) {
loom.path <- paste0(f,"/counts_unfiltered/adata.loom")
loom.adata <- ReadVelocity(loom.path)
}
#Load loom files and merge datasets
for (f in output_folders) {
loom.path <- paste0(f,"/counts_unfiltered/adata.loom")
loom.adata <- ReadVelocity(loom.path)
}
#Load loom files and merge datasets
for (f in output_folders) {
loom.path <- paste0(f,"/counts_unfiltered/adata.loom")
loom.adata <- ReadVelocity(loom.path)
}
library(Seurat)
library(SeuratWrappers)
data.dir = "/Users/tilman_work/Documents/Projects/scvworkflow/testset/kallistobus"
dir <- normalizePath(data.dir, mustWork = TRUE)
output_folders <- list.files(dir,
recursive = FALSE, include.dirs = TRUE, full.names = TRUE)
#Load loom files and merge datasets
for (f in output_folders) {
loom.path <- paste0(f,"/counts_unfiltered/adata.loom")
loom.adata <- ReadVelocity(loom.path)
}
library(velocyto.R)
ReadVelocity()
library(SeuratWrappers)
x <- ReadVelocity("/Users/tilman_work/Documents/Projects/scvworkflow/testset/kallistobus/pbmc/counts_unfiltered/adata.loom")
library(Seurat)
library(SeuratWrappers)
library(velocyto.R)
x <- ReadVelocity("/Users/tilman_work/Documents/Projects/scvworkflow/testset/kallistobus/pbmc/counts_unfiltered/adata.loom")
download.file("https://bioshare.bioinformatics.ucdavis.edu/bioshare/download/iimg5mz77whzzqc/654.loom", "654.loom")
getwd()
x <- ReadVelocity("/Users/tilman_work/Documents/Projects/scvworkflow/testset/654.loom")
x
View(x)
x$spliced
x$spliced
x$unspliced
x$ambiguous
BiocManager::install("BUSpaRse")
library(BUSpaRse)
data.dir = "/Users/tilman_work/Documents/Projects/scvworkflow/testset/kallistobus/pbmc/counts_unfiltered"
c(spliced, unspliced) %<-% read_velocity_output(spliced_dir = data.dir,
spliced_name = "spliced",
unspliced_dir = data.dir,
unspliced_name = "unspliced")
install.packages('zealot')
install.packages('zeallot')
library(zeallot)
library(tidyverse)
c(spliced, unspliced) %<-% read_velocity_output(spliced_dir = data.dir,
spliced_name = "spliced",
unspliced_dir = data.dir,
unspliced_name = "unspliced")
library(BUSpaRse)
c(spliced, unspliced) %<-% read_velocity_output(spliced_dir = data.dir,
spliced_name = "spliced",
unspliced_dir = data.dir,
unspliced_name = "unspliced")
View(spliced)
len(spliced)\len(spliced)+len(unspliced)
len(spliced)/len(spliced)+len(unspliced)
sum(unspliced@x) / (sum(unspliced@x) + sum(spliced@x))
sce <- SingleCellExperiment(assays = list(counts = spliced), rowData = rownames(spliced))
library(Seurat)
sce <- SingleCellExperiment(assays = list(counts = spliced), rowData = rownames(spliced))
library(SingleCellExperiment)
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
sce <- SingleCellExperiment(assays = list(counts = spliced), rowData = rownames(spliced))
View(sce)
cells(sce)
Cells(sce)
sce[["spliced"]]
sce <- as.Seurat(sce)
sce[["RNA"]]
sce[["RNA"]] <- sce[["spliced"]]
sce <- SCTransform(sce)
sce <- SingleCellExperiment(assays = list(counts = spliced), rowData = rownames(spliced))
sce <- SingleCellExperiment(assays = list(counts = spliced), rowData = rownames(spliced))
sce <- SCTransform(sce)
bm <- as.Seurat(x=sce)
bc_rank <- barcodeRanks(spliced)
bc_uns <- barcodeRanks(unspliced)
colnames(spliced)
colnames(spliced) == colnames(unspliced)
x <- intersect(colnames(spliced),colnames(unspliced))
x
all_cells <- intersect(colnames(spliced),colnames(unspliced)
all_cells <- intersect(colnames(spliced),colnames(unspliced))
unspliced.data.df <- unspliced.data.df[,all_cells]
spliced.data.df <- spliced.data.df[,all_cells]
unspliced.data.df <- spliced[,all_cells]
spliced.data.df <- spliced.data.df[,all_cells]
unspliced.data.df <- unspliced.data.df[,all_cells]
spliced.data.df <- spliced[,all_cells]
View(spliced.data.df)
data.df <- spliced.data.df
sce <- SingleCellExperiment(assays = list(counts = spliced), rowData = rownames(spliced))
seurat_object = CreateSeuratObject(counts = spliced)
seurat_object
bm = CreateSeuratObject(counts = spliced)
bm <- SCTransform(bm)
mito.genes <- grep(pattern = "^MT-", x = rownames(sce@assays[["RNA"]]), value = TRUE)
sce[["RNA"]]
mito.genes <- grep(pattern = "^MT-", x = rownames(bm@assays[["RNA"]]), value = TRUE)
bm[["RNA"]]
percent.mito <- Matrix::colSums(pbmc@assays[["RNA"]][mito.genes, ])/Matrix::colSums(pbmc@assays[["RNA"]])
percent.mito <- Matrix::colSums(bm@assays[["RNA"]][mito.genes, ])/Matrix::colSums(bm@assays[["RNA"]])
bm <- AddMetaData(object = bm, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3)
VlnPlot(object = bm, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3)
VlnPlot(object = bm, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3)
bmc$percent.mito <- percent.mito
bm$percent.mito <- percent.mito
bm
VlnPlot(object = bm, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3)
View(bm)
bm[['nCount_RNA']]
bm[['percent.mito']]
bm[['percent.mito']] = ""
View(bm)
bm[['percent.mito']] = 0
View(bm)
VlnPlot(object = bm, features = c("nFeature_RNA", "nCount_RNA"), ncol = 2)
VlnPlot(object = bm, features = c("nFeature_RNA", "nCount_RNA"), ncol = 2)
#QC settings
run.plate_qc = T
extract_phenotypes = T
add.qc.ERCC = T
add.qc.MT = T
## Storing results ##
kb.dir <-  "/Users/tilman_work/Documents/Projects/R/testset/kallistobus"
workdir <- "/Users/tilman_work/Documents/Projects/R/scRNA-seq"
# if regression is performed: this will already be included in the folder name
result_descript = "_results_PreprocessingDataset_complete_clean"
## Parameters for processing dataset and metadata ##
barcode_file = paste0(workdir,"/data/","barcode_384.tab")
MT_genes_file = paste0(workdir, "/data/","MT_genes.txt")
# Edit plate names with substitutes:
old_col_pattern = "_S"
new_col_pattern = "-S"
# Retrieve the variables from the platenames (fields seperated with "_"):
plate_variables = c("Genome","Method", "Lineage", "Timepoint", "Replicate" , "Library", "Well")
# Unique combined ID per plate, for visualization purposes
combined_variables_to_id = c("Method", "Lineage", "Timepoint", "Library")
## Filtering of the dataset ##
# Settings for genes
gene_tresh = 0
amount_cells_expr = 0
# Settings for cells
total_counts_tresh = 1000
total_feat_tresh = 500
ERCC_pct_max <- 20
mt_pct_max <- 50
## Subsetting the dataset ##
# Specify a specific (sub)string to select the cells on (selection happens on the colnames)
subset_id = ""
# Select the type of filtering: keep cells with the substring (set "in") or remove (set "out")
# if NO filtering is wanted, leave empty (set "" or "no")
filtering = "no"
n_bc = 384
## Seurat Normalization, HVG selection (vst) & Scaling (and Regression) ##
nHVG = 2000
# Regression performed on the following variables:
vars_to_regress = c("nCount_sf", "nFeature_sf") # If no regression desired: NULL
## Dimensionality reduction ##
# For PCA to run on
pcs_max = 70
# PCs used for different UMAP representations
pcs_for_overview = c(10, 20, 30, 40, 50)
## Visualization ##
# label from phenodata to color in Scater and Seurat plots
lab_col = "Library"
umap_col = "Method"
# Checking variability explained by confounding factors
confounders_to_test = c("Library", "Lineage","Timepoint")
# Marker genes for violin plots
explore_violin = c("SOX2", "GAPDH")
## Location of scripts ##
source(paste0(workdir,"/src/read_kb_dataset_s2s.R"))
source(paste0(workdir,"/src/qc_umis_384plot.R"))
## Splice seperated dataset:
spliced.data.df = read_kb_counts(kb.dir, "spliced", barcode_file = barcode_file)
unspliced.data.df = read_kb_counts(kb.dir, "unspliced", barcode_file = barcode_file)
## Optional edits on cell names:
# This only runs if a substring that needs replacement was defined in parameters (old_col_pattern):
if (old_col_pattern != ""){
colnames(spliced.data.df) <- gsub(old_col_pattern, new_col_pattern, colnames(spliced.data.df))
colnames(unspliced.data.df) <- gsub(old_col_pattern, new_col_pattern, colnames(unspliced.data.df))
}
add.qc.ERCC = F
getwd()
setwd("~/Documents/Projects/R/scRNA-seq")
install.packages("here")
here()
library(here)
